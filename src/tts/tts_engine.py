import pyttsx3\nfrom gtts import gTTS\nimport os\nimport markdown\nimport asyncio\n\nclass TTS:\n    def __init__(self, backend='pyttsx3', voice='default', rate=150):\n        self.backend = backend\n        self.voice = voice\n        self.rate = rate\n        \n        if backend == 'pyttsx3':\n            self.engine = pyttsx3.init()\n            self.engine.setProperty('rate', self.rate)\n            # Set voice if available\n            voices = self.engine.getProperty('voices')\n            self.engine.setProperty('voice', voices[0].id)  # Example for default\n            \n    def clean_markdown(self, text):\n        """Remove markdown formatting from the text."""\n        return markdown.markdown(text)\n\n    async def speak(self, text):\n        """Convert text to speech using the selected backend."""\n        cleaned_text = self.clean_markdown(text)\n        if self.backend == 'pyttsx3':\n            self.engine.say(cleaned_text)\n            self.engine.runAndWait()\n        elif self.backend == 'gTTS':\n            tts = gTTS(text=cleaned_text, lang='en')\n            filename = 'temp.mp3'\n            tts.save(filename)\n            os.system(f'start {filename}')  # Replace with appropriate command on non-Windows systems\n        else:\n            raise ValueError("Unsupported TTS backend")\n